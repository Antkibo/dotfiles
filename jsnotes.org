* Javascript

** Interpreted vs compiled code



** Client-side and server-side

Some code runs on your browser, while other runs on the web server. The former is called client-side code, while the latter is called server-side code. Both complement each other to create rich websites. Using objects called XMLHttpRequest client-side code can ask data from the web server.

* HTTP

*HyperText Transfer Protocol* (HTTP) is an *application-layer protocol* for transmitting hypermedia documents, such as HTML. It was designed for communication between *web browsers* and *web servers*, but it can also be used for other purposes. HTTP follows a classical *client-server model*, with a client opening a connection to make a request, then waiting until it receives a response. HTTP is a *stateless protocol*, meaning that the server doesn't keep any data (state) between two requests.

** Components

- Client: the user-agent
- Web server
- Proxies

** Basic aspects

- HTTP is simple. HTTP is generally designed to be human readable.
- Is extensible. HTTP headers make this protocol easy to extend and experiment with.
- Is stateless, but not sessionless. While the core of HTTP is stateless, HTTP cookies allow the use of stateful sessions.
- HTTP and connections. HTTP relies on the TCP standard, which is connection-based and reliable.

** What can be controlled by HTTP

1. Caching
2. Relaxing the origin constraint.
3. Authetication
4. Proxy and tunneling
5. Sessions

** HTTP flow

1. Open a TCP connection.
2. Send an HTTP message.
3. Read the response sent by the server.
4. Close or reuse the connection for further requests.

** HTTP requests

An example HTTP request:

    ~GET / HTTP/1.1~
    ~Host: developer.mozilla.org~
    ~Accept-Language: fr~

Requests consists of the following elements:

1. An HTTP method such as GET, POST, or a noun like OPTIONS or HEAD that defines the operation the client wants to perform.
2. The path of the resources to fetch; the URL of the resource stripped from elements that are obvious from the context, for example without the protocol (http://), the domain (here, developer.mozilla.org), or the TCP port (here, 80).
3. The version of the HTTP protocol.
4. Optional headers that convey additional information for the servers.
5. Or a body, for some methods like POST, similar to those in responses, which contain the resource sent.

** HTTP responses

An example response:

~HTTP/1.1 200 OK~
~Date: Sat, 09 Oct 2010 14:28:02 GMT~
~Server: Apache~
~Last-Modified: Tue, 01 Dec 2009, 20:18:22 GMT~
~ETag: "51142bc1-7449-479b075b2891b"~
~Accept-Ranges: bytes~
~Content-Length: 29769~
~Content-Type: text/html~

Responses consist of the following elements:

1. The version of the HTTP protocol they follow.
2. A status code, indicating if the request was succesful, or not, and why.
3. A status message, a non-authoritative short description of the status code.
4. HTTP headers, like those for requests.
5. Optionally, a body containing the fetched resource.




** APIs based on HTTP

The most commonly used API based on HTTP is the XMLHttpRequest API, which can be used to exchange data between a user agent and a server. The modern Fetch API provides the same features with a more powerful and flexible feature set.

Another API, server-sent events, is a one-way service that allows a server to send events to the client, using HTTP as a transport mechanism.
